# -*- coding: utf-8 -*-
"""SE_POC_adattranszformáció_sprint01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SAaJ4NdmCQ-pw2Cjd7sNY-G_WWLqp-Zk
"""

# Import modules
import pandas as pd
import numpy as np
import os
from pathlib import Path

# Set and check data path
data_path = r"/content/drive/MyDrive/Projektek/Semmelweis PoC/202401_Semmelweis - GenAI anamnézis - PoC (425)/10_Kapott_anyagok/kapott_anyagok_ 2024_02_06"
os.listdir(data_path)

# Select input file from data path
filename = 'zarok_ai_utolso_szoveg_verzio_20240204.xlsx'

# Set file path
file_path = os.path.join(data_path, filename)
print(file_path)

# fname_base = Path(file_path).stem
# print(fname_base)

# Read raw file into pandas dataframe
df_raw = pd.read_excel(file_path, dtype={'NPI':'object', 'CASE_NO':'object'}).convert_dtypes()

# Correct column types and names
df_raw['ADMIT_DATE'] = df_raw['ADMIT_DATE'].dt.date

df_raw = df_raw.rename(columns={
    'Ananmézis': 'Anamnézis',
    # 'Jelen panaszok': 'Jelenlegi panaszok',
    # 'Dekurzus': 'Dekurzus',
    # 'Epikrízis': 'Epikrízis',
    # 'Egyéb vizsgálatok': 'Egyéb vizsgálatok',
    # 'Műtéti leírás': 'Műtéti leírás',
    # 'Státusz': 'Státusz',
    # 'Javaslat': 'Javaslat',
    'Therápia': 'Terápia'
})

df_raw.info()
df_raw

# Unpivot (melt) raw dataframe and drop empty rows
df_melt = df_raw.melt(
      id_vars=['NPI', 'CASE_NO', 'ADMIT_DATE', 'CASE_TYPE', 'DEPT', 'DESCR', 'TX_TYPE', 'VER_NO', 'SEQ_NO'],
      value_vars=['Anamnézis', 'Jelen panaszok', 'Dekurzus', 'Epikrízis', 'Egyéb vizsgálatok', 'Műtéti leírás', 'Státusz', 'Javaslat', 'Terápia'],
      var_name='TYPE',
      value_name='VALUE'
      ).dropna(subset='VALUE')

# Add specific sorting column
df_melt.insert(
    df_melt.columns.get_loc('TYPE'),
    'TYPE_ORDER',
    df_melt['TYPE'].replace(
        {
            'Anamnézis': 1,
            'Jelen panaszok': 2,
            'Dekurzus': 3,
            'Epikrízis': 4,
            'Egyéb vizsgálatok': 5,
            'Műtéti leírás': 6,
            'Státusz': 7,
            'Javaslat': 8,
            'Terápia': 9
    }
  ).convert_dtypes()
)

# Replace multiple whitespace characters in VALUE column
df_melt['VALUE'] = df_melt['VALUE'].str.replace(r' +', ' ', regex=True)
df_melt['VALUE'] = df_melt['VALUE'].str.replace(r'[\n\t\r\f]+', '\n', regex=True)

# Strip VALUE (and interpret empty string '' as NA)
df_melt['VALUE'] = df_melt['VALUE'].str.strip().replace('', pd.NA)

#
df_melt['TX_TYPE'] = df_melt['TX_TYPE'].str.upper()

# Add TYPE to TEXT
df_melt['TEXT'] = df_melt['TYPE'].str.upper() + ':\n' + df_melt['VALUE'].str.replace('\n', '\n\t')

# TEXT2
df_melt['TEXT2'] = df_melt['TYPE'].str.upper() + ' (' + df_melt['ADMIT_DATE'].astype(str) + '):\n' + df_melt['VALUE'].str.replace('\n', '\n\t')

# Drop NA, convert dtypes, and sort melt dataframe
df_melt = df_melt.dropna().convert_dtypes().sort_values(['NPI', 'ADMIT_DATE', 'CASE_NO', 'TYPE_ORDER'], ignore_index=True)
df_melt

# Merge text
df_merged = df_melt.groupby(['NPI','ADMIT_DATE','CASE_NO','CASE_TYPE','DEPT','DESCR'])[['TEXT']].agg("\n\n".join).reset_index(level=-1)
df_merged

df_anm_all = df_melt[df_melt['TX_TYPE'] == 'ANM'].groupby(['NPI'])[['VALUE']].agg("\n\n".join)
df_anm_all

df_epd_all = df_melt[df_melt['TX_TYPE'] == 'EPD'].groupby(['NPI'])[['VALUE']].agg("\n\n".join)
df_epd_all

# Write each patient document (per case number) to txt files
ext = 'txt'
dir = 'patient'
full_subdir = 'src/full'

for i in df_merged.index:
  # Get metadata
  npi = i[0]
  admit_date = i[1]
  case_no = i[2]
  case_type = i[3]
  dept = i[4]

  # Set patient folder as NPI
  patient_dir = f'{(i[0])}'
  output_dir = os.path.join(data_path, dir, patient_dir, full_subdir)

  # Make output directory if does not exist
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)

  # Set output filename as NPI+ADMIT_DATE+CASE_NO+CASE_TYPE+DEPT
  fname = f'{npi}_{admit_date}_{case_no}_{case_type}_{dept}.{ext}'
  output_file = os.path.join(output_dir, fname)

  # Get content for output file
  department = df_merged.loc[i, 'DESCR']
  text = df_merged.loc[i, 'TEXT']

  # Create header
  header = f'ZÁRÓJELENTÉS\nPáciens: {npi} | Rögzítési dátum: {admit_date} | Dokumentum: {case_no} | Osztály: {department} ({dept})\n\n'

  # Write output file
  print(f'\rWriting case {case_no} for patient {npi}\t\t', end='')
  with open(output_file, 'w') as f:
    f.write(header)
    f.write(text)


# Write merged medical history for each patient
merged_subdir = 'src/merged'
for i in df_anm_all.index:
  # Get data
  npi = i
  text = df_anm_all.loc[i, 'VALUE']

  # Set patient folder as NPI
  patient_dir = f'{npi}'
  output_dir = os.path.join(data_path, dir, patient_dir, merged_subdir)

  # Make output directory if does not exist
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)

  # Set output filename
  fname = f'{npi}_ANM_MERGED.{ext}'
  output_file = os.path.join(output_dir, fname)

  # Write output file
  print(f'\rWriting merged medical history (anamnesis) for patient {npi}\t\t', end='')
  with open(output_file, 'w') as f:
    f.write(text)


# Write merged epicrisis for each patient
merged_subdir = 'src/merged'
for i in df_epd_all.index:
  # Get data
  npi = i
  text = df_epd_all.loc[i, 'VALUE']

  # Set patient folder as NPI
  patient_dir = f'{npi}'
  output_dir = os.path.join(data_path, dir, patient_dir, merged_subdir)

  # Make output directory if does not exist
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)

  # Set output filename
  fname = f'{npi}_EPD_MERGED.{ext}'
  output_file = os.path.join(output_dir, fname)

  # Write output file
  print(f'\rWriting merged epicrisis for patient {npi}\t\t', end='')
  with open(output_file, 'w') as f:
    f.write(text)

print('\rAll files complete')

df_merged.reset_index().groupby("NPI")[['CASE_NO']].count()

"""# Filtering for anamnesis and epicrisis only"""

df_melt['FINAL_TEXT'] = df_melt.apply(lambda row: row['TEXT'] if row['TX_TYPE'] == 'ANM' else row['TEXT2'], axis=1)
df_melt

df_melt[df_melt['NPI'] == "013763925"]

# Merge ANM and EPD text only
df_merged_filtered = df_melt[df_melt['TX_TYPE'].isin(('ANM', 'EPD'))].groupby(['NPI','ADMIT_DATE','CASE_NO','CASE_TYPE','DEPT','DESCR'])[['FINAL_TEXT']].agg("\n\n".join).reset_index(level=-1)
df_merged_filtered

# Write each patient document (per case number) to txt files
ext = 'txt'
dir = 'patient'
filtered_subdir = 'src/filtered'

for i in df_merged_filtered.index:
  # Get metadata
  npi = i[0]
  admit_date = i[1]
  case_no = i[2]
  case_type = i[3]
  dept = i[4]

  # Set patient folder as NPI
  patient_dir = f'{(i[0])}'
  output_dir = os.path.join(data_path, dir, patient_dir, filtered_subdir)

  # Make output directory if does not exist
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)

  # Set output filename as NPI+ADMIT_DATE+CASE_NO+CASE_TYPE+DEPT
  fname = f'{npi}_{admit_date}_{case_no}_{case_type}_{dept}_filtered.{ext}'
  output_file = os.path.join(output_dir, fname)

  # Get content for output file
  department = df_merged_filtered.loc[i, 'DESCR']
  text = df_merged_filtered.loc[i, 'FINAL_TEXT']

  # Create header
  # header = f'ZÁRÓJELENTÉS\nPáciens: {npi} | Rögzítési dátum: {admit_date} | Dokumentum: {case_no} | Osztály: {department} ({dept})\n\n'

  # Write output file
  print(f'\rWriting case {case_no} for patient {npi}\t\t', end='')
  with open(output_file, 'w') as f:
    # f.write(header)
    f.write(text)

print('\rAll files complete')

df_merged_filtered.reset_index().groupby("NPI")[['CASE_NO']].count()

print(output_file)